syntax = "proto3";

message RotaryEncoder {
  int32 step = 1;
  float last_step_change = 2;
  bool button_pressed = 3;
  float last_button_down = 4;
  float last_button_up = 5;
}

// Display Settings

// TODO: should metric be 0? (i.e. the default)
enum Unit {
  imperial = 0;
  metric = 1;
}

enum ThemeVariant {
  dark = 0;
  light = 1;
}

// TODO: we also need a request version of this message, FrontendDisplaySettingsRequest
// TODO: rename this to FrontendDisplaySettings (with the "s" at the end)
message FrontendDisplaySetting {
  ThemeVariant theme = 1;
  Unit unit = 2;
}

// System Settings

message SystemSettings {
  // We use a double and units of sec because otherwise we'd use uint64 and
  // units of ms, but then mcu_pb.LogEvent needs to have oldUint64 and newUint64
  // instead of oldUint32 and newUint32, and the frontend runs into problems
  // because it can only have 53 bits of precision in the number type (in which
  // case the frontend would then need to use BigInt), which prevents the frontend
  // from working correctly on other things which require LogEvent.oldUint32/newUint32.
  double date = 1;  // Unix timestamp in units of sec
  // TODO: move display_brightness into FrontendDisplaySetting
  uint32 display_brightness = 2;
  uint32 seq_num = 3;
}

message SystemSettingsRequest {
  double date = 1;  // Unix timestamp in units of sec
  uint32 display_brightness = 2;
  uint32 seq_num = 3;
}
