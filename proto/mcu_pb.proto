syntax = "proto3";

message Range {
  int32 lower = 1;
  int32 upper = 2;
}

message AlarmLimits {
  uint64 time = 1;
  Range fio2 = 2;
  Range flow = 3;
  Range spo2 = 4;
  Range hr = 5;
  Range rr = 6;
  Range pip = 7;
  Range peep = 8;
  Range ip_above_peep = 9;
  Range insp_time = 10;
  Range paw = 11;
  Range mve = 12;
  Range tv = 13;
  Range etco2 = 14;
  Range apnea = 15;
}

message AlarmLimitsRequest {
  uint64 time = 1;
  Range fio2 = 2;
  Range flow = 3;
  Range spo2 = 4;
  Range hr = 5;
  Range rr = 6;
  Range pip = 7;
  Range peep = 8;
  Range ip_above_peep = 9;
  Range insp_time = 10;
  Range paw = 11;
  Range mve = 12;
  Range tv = 13;
  Range etco2 = 14;
  Range apnea = 15;
}

message SensorMeasurements {
  uint64 time = 1;
  uint32 cycle = 2;
  float fio2 = 3;
  float flow = 4;
  float spo2 = 5;
  float hr = 6;
  float paw = 7;
  float volume = 8;
}

message CycleMeasurements {
  uint64 time = 1;
  float vt = 2;
  float rr = 3;
  float peep = 4;
  float pip = 5;
  float ip = 6;
  float ve = 7;
}

enum VentilationMode {
  hfnc = 0;
  pc_ac = 1;
  vc_ac = 2;
  niv_pc = 3;
  niv_ps = 4;
  psv = 5;
  prvc = 6;
}

message Parameters {
  uint64 time = 1;
  bool ventilating = 2;
  VentilationMode mode = 3;
  float fio2 = 4;
  float flow = 5;
  float pip = 6;
  float peep = 7;
  float vt = 8;
  float rr = 9;
  float ie = 10;
}

message ParametersRequest {
  uint64 time = 1;
  bool ventilating = 2;
  VentilationMode mode = 3;
  float fio2 = 4;
  float flow = 5;
  float pip = 6;
  float peep = 7;
  float vt = 8;
  float rr = 9;
  float ie = 10;
}

// Testing messages

message Ping {
  uint64 time = 1;
  uint32 id = 2;
}

message Announcement {
  uint64 time = 1;
  bytes announcement = 2;
}

// Log Events
enum LogEventCode {
  // Patient alarms
  fio2_too_low = 0;
  fio2_too_high = 1;
  flow_too_low = 2;
  flow_too_high = 3;
  spo2_too_low = 4;
  spo2_too_high = 5;
  hr_too_low = 6;
  hr_too_high = 7;
  // Control settings
  ventilation_operation_changed = 64;
  ventilation_mode_changed = 65;
  fio2_setting_changed = 66;
  flow_setting_changed = 67;
  // Alarm limits settings
  fio2_alarm_limits_changed = 80;
  flow_alarm_limits_changed = 81;
  spo2_alarm_limits_changed = 82;
  hr_alarm_limits_changed = 83;
  // System settings & alarms
  screen_locked = 129;
  mcu_connection_down = 130;
  backend_connection_down = 131;
  frontend_connection_down = 132;
  mcu_connection_up = 133;
  backend_connection_up = 134;
  frontend_connection_up = 135;
  battery_low = 136;
}

enum LogEventType {
  patient = 0;
  control = 1;
  alarm_limits = 2;
  system = 3;
}

message LogEvent {
  uint32 id = 1;
  uint64 time = 2;
  LogEventCode code = 3;
  LogEventType type = 4;
  Range alarm_limits = 5;
  float old_float = 6;
  float new_float = 7;
  uint32 old_uint32 = 8;
  uint32 new_uint32 = 9;
  bool old_bool = 10;
  bool new_bool = 11;
  Range old_range = 12;
  Range new_range = 13;
  VentilationMode old_mode = 14;
  VentilationMode new_mode = 15;
}

message ExpectedLogEvent {
  uint32 id = 1;
  uint32 session_id = 2;  // used when the sender's log is ephemeral
}

message NextLogEvents {
  uint32 next_expected = 1;
  uint32 total = 2;
  uint32 remaining = 3;
  uint32 session_id = 4;  // used when the sender's log is ephemeral
  repeated LogEvent elements = 5;
}

message ActiveLogEvents {
  repeated uint32 id = 1;
}

// Power Management

message BatteryPower {
  uint32 power_left = 1;
  bool charging_status = 2;
}

// Hardware Buttons

message ScreenStatus {
  bool lock = 1;
}

message AlarmMute {
  bool active = 1;
  uint64 remaining = 2;
}

message AlarmMuteRequest {
  bool active = 1;
  uint64 remaining = 2;
}
