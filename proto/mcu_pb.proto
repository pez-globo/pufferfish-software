syntax = "proto3";

// Measurements

message SensorMeasurements {
  uint64 time = 1;  // ms
  uint32 cycle = 2;
  float fio2 = 3;
  float flow = 4;
  float spo2 = 5;
  float hr = 6;
  float paw = 7;
  float volume = 8;
}

message CycleMeasurements {
  uint64 time = 1;  // ms
  float vt = 2;
  float rr = 3;
  float peep = 4;
  float pip = 5;
  float ip = 6;
  float ve = 7;
}

// Parameters

enum VentilationMode {
  hfnc = 0;
  pc_ac = 1;
  vc_ac = 2;
  niv_pc = 3;
  niv_ps = 4;
  psv = 5;
  prvc = 6;
}

message Parameters {
  uint64 time = 1;  // ms
  bool ventilating = 2;
  VentilationMode mode = 3;
  float fio2 = 4;
  float flow = 5;
  float pip = 6;
  float peep = 7;
  float vt = 8;
  float rr = 9;
  float ie = 10;
}

message ParametersRequest {
  uint64 time = 1;  // ms
  bool ventilating = 2;
  VentilationMode mode = 3;
  float fio2 = 4;
  float flow = 5;
  float pip = 6;
  float peep = 7;
  float vt = 8;
  float rr = 9;
  float ie = 10;
}

// Alarm Limits

message Range {
  int32 lower = 1;
  int32 upper = 2;
}

// TODO: AlarmLimits has a max size above 256 bytes, so we need to increase the communication protocol's chunks from a max length of 256 bytes to something more like 512 bytes!
message AlarmLimits {
  uint64 time = 1;  // ms
  Range fio2 = 2;
  Range flow = 3;
  Range spo2 = 4;
  Range hr = 5;
  Range rr = 6;
  Range pip = 7;
  Range peep = 8;
  Range ip_above_peep = 9;
  Range insp_time = 10;
  Range paw = 11;
  Range mve = 12;
  Range tv = 13;
  Range etco2 = 14;
  Range apnea = 15;
}

// TODO: AlarmLimitsRequest has a max size above 256 bytes, so we need to increase the communication protocol's chunks from a max length of 256 bytes to something more like 512 bytes!
message AlarmLimitsRequest {
  uint64 time = 1;  // ms
  Range fio2 = 2;
  Range flow = 3;
  Range spo2 = 4;
  Range hr = 5;
  Range rr = 6;
  Range pip = 7;
  Range peep = 8;
  Range ip_above_peep = 9;
  Range insp_time = 10;
  Range paw = 11;
  Range mve = 12;
  Range tv = 13;
  Range etco2 = 14;
  Range apnea = 15;
}

// Log Events

enum LogEventCode {
  // Patient alarms
  fio2_too_low = 0;
  fio2_too_high = 1;
  flow_too_low = 2;
  flow_too_high = 3;
  spo2_too_low = 4;
  spo2_too_high = 5;
  hr_too_low = 6;
  hr_too_high = 7;
  // Control settings
  ventilation_operation_changed = 64;
  ventilation_mode_changed = 65;
  fio2_setting_changed = 66;
  flow_setting_changed = 67;
  // Alarm limits settings
  fio2_alarm_limits_changed = 80;
  flow_alarm_limits_changed = 81;
  spo2_alarm_limits_changed = 82;
  hr_alarm_limits_changed = 83;
  // System settings & alarms
  screen_locked = 129;
  mcu_backend_connection_down = 130;  // mcu lost backend
  backend_mcu_connection_down = 131;  // backend lost mcu
  backend_frontend_connection_down = 132;  // backend lost frontend
  // TODO: if the backend can't send data to the frontend but the frontend can send
  // data to the backend, we should make the backend generate a frontend_backend_down
  // log event so that there's some record in the event log of a connection problem.
  // We can achieve this using a FrontendConnections message type which the frontend sends
  // to the backend.
  frontend_backend_connection_down = 133;  // frontend lost backend
  mcu_backend_connection_up = 134;  // mcu detected backend
  // TODO: if the mcu can't send data to the backend but the backend can send
  // data to the mcu, we should make the backend generate a backend_mcu_up
  // log event once the mcu becomes able to send data again so that the event log
  // has a connection_up event to match the connection_down event.
  backend_mcu_connection_up = 135;  // backend detected mcu
  backend_frontend_connection_up = 136;  // backend detected frontend
  // TODO: if the backend can't send data to the frontend but the frontend can send
  // data to the backend, we should make the backend generate a frontend_backend_up
  // log event once the frontend detects that the backend is able to send data again,
  // so that the event log has a connection_up event to match the connection_down event.
  // We can achieve this using a FrontendConnections message type which the frontend sends
  // to the backend.
  frontend_backend_connection_up = 137;  // frontend detected backend
  battery_low = 138;
  battery_critical = 139;
  charger_disconnected = 140;
  mcu_started = 141;
  backend_started = 142;
  mcu_shutdown = 143;
  backend_shutdown = 144;
  sysclock_changed = 145;
  // Alarm muting/unmuting
  alarms_muted_user_software = 146;
  alarms_muted_user_hardware = 147;
  alarms_muted_unknown = 148;  // Indicates a software bug; should never occur
  alarms_unmuted_user_software = 149;
  alarms_unmuted_user_hardware = 150;
  alarms_unmuted_initialization = 151;
  alarms_unmuted_timeout = 152;
  alarms_unmuted_mcu_backend_loss = 153;
  alarms_unmuted_backend_mcu_loss = 154;
  alarms_unmuted_backend_frontend_loss = 155;
  alarms_unmuted_frontend_backend_loss = 156;
  alarms_unmuted_unknown = 157;  // Indicates a software bug; should never occur
  // Sensor loss
  sfm3019_air_disconnected = 160;
  sfm3019_o2_disconnected = 161;
  fdo2_disconnected = 162;
}

enum LogEventType {
  patient = 0;
  control = 1;
  alarm_limits = 2;
  system = 3;
}

message LogEvent {
  uint32 id = 1;
  uint64 time = 2;  // ms
  LogEventCode code = 3;
  LogEventType type = 4;
  Range alarm_limits = 5;
  // TODO: rename these to old/new_double
  double old_float = 6;
  double new_float = 7;
  uint32 old_uint32 = 8;
  uint32 new_uint32 = 9;
  bool old_bool = 10;
  bool new_bool = 11;
  Range old_range = 12;
  Range new_range = 13;
  VentilationMode old_mode = 14;
  VentilationMode new_mode = 15;
}

message ExpectedLogEvent {
  uint32 id = 1;
  // session_id is checked by the NextLogEvents sender if the sender's log is
  // ephemeral; the sender will ignore any ExpectedLogEvent whose session_id
  // doesn't match the sender's session_id, which is announced in NextLogEvents.
  uint32 session_id = 2;  // used when the sender's log is ephemeral
}

// Note: NextLogEvents has a custom equality operator in the firmware which must
// be updated if you add/remove/modify the fields of the protobuf definition!
// TODO: NextLogEvents has a max size above 256 bytes, so we need to increase the communication protocol's chunks from a max length of 256 bytes to something more like 512 bytes!
message NextLogEvents {
  uint32 next_expected = 1;
  uint32 total = 2;
  uint32 remaining = 3;
  uint32 session_id = 4;  // used when the sender's log is ephemeral
  repeated LogEvent elements = 5;
}

// Note: NextLogEvents has a custom equality operator in the firmware which must
// be updated if you add/remove/modify the fields of the protobuf definition!
message ActiveLogEvents {
  repeated uint32 id = 1;
}

// Alarm Muting

enum AlarmMuteSource {
  initialization = 0;  // Alarm muting was set on initialization
  user_software = 1;  // User took a software action to change alarm muting
  user_hardware = 2;  // User took a hardware action to change alarm muting
  timeout = 3;  // Alarm mute automatically timed out
  mcu_backend_loss = 4; // Alarm mute was cancelled by mcu due to connection loss
  backend_mcu_loss = 5; // Alarm mute was cancelled by backend due to connection loss
  backend_frontend_loss = 6; // Alarm mute was cancelled by backend due to connection loss
  frontend_backend_loss = 7; // Alarm mute was cancelled by frontend due to connection loss
}

message AlarmMute {
  bool active = 1;
  // seq_num is a logical clock and advances in the firmware after each local action
  // in the firmware (such as a button-press) or the servicing of each external request.
  uint32 seq_num = 2;
  AlarmMuteSource source = 3;
  uint64 remaining = 4;  // ms
}

message AlarmMuteRequest {
  bool active = 1;
  // seq_num is a logical clock which also acts as an idempotency key for requests:
  // the firmware only services an AlarmMuteRequest if the request's seq_num is one
  // greater than the seq_num in the firmware's copy of AlarmMute.
  uint32 seq_num = 2;
  AlarmMuteSource source = 3;
}

// Miscellaneous System

message MCUPowerStatus {
  float power_left = 1;
  bool charging = 2;
}

message BackendConnections {
  bool has_mcu = 1;
  bool has_frontend = 2;
}

message ScreenStatus {
  bool lock = 1;
}

// Testing Messages

message Ping {
  uint64 time = 1;  // ms
  uint32 id = 2;
}

message Announcement {
  uint64 time = 1;  // ms
  bytes announcement = 2;
}
