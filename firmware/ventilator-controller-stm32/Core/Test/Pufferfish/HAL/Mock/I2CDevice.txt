SCENARIO('I2C mock device works correctly for read method') 
  GIVEN('Freshly constructed mock device') 
    WHEN('The add_read method is called with input parameters [a0 e8 d4 fd 97]bytes, and ok I2CDeviceStatus') 
      THEN('The count value returns 54') 
      THEN('The read method returns OK status') 
      THEN('After the read method call, read buffer contains [a0 e8 d4 fd 97] bytes') 

    WHEN('The add_read method is called with input parameters [a0 e8 d4 fd 97] bytes, and read_error I2CDeviceStatus  ') 
      THEN('The count value returns 54') 
      THEN('The read method returns read_error status') 
      THEN('After the read method call, read buffer contains [a0 e8 d4 fd 97] bytes') 

    WHEN('The add_read method is called with input parameters [a0 e8 d4 fd 97]bytes, and crc_check_failed I2CDeviceStatus') 
      THEN('The count value returns 54') 
      THEN('The read method returns crc_check_failed status') 
      THEN('After the read method call, read buffer contains [a0 e8 d4 fd 97] bytes') 

    WHEN('The add_read method is called with input parameters [a0 e8 d4 fd 97]bytes, and test_failed I2CDeviceStatus') 
      THEN('The count value returns 54') 
      THEN('The read method returns test_failed status') 
      THEN('After the read method call , read buffer contains[a0 e8 d4 fd 97] bytes') 

SCENARIO('Mock I2CDevice works correctly for read method when called six times') 
  GIVEN('Freshly constructed mock device') 
    WHEN('The add_read method is called five times with input parametes,[27 b8] [64 f3] [e1 7c] [d5 55] [2e 87] bytes and [ok][read_error][invalid_arguments][crc_check_failed][no_new_data] I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [27 b8]bytes') 
      THEN('The second read method call returns read_error status') 
      THEN('After the second read method call, read buffer contains [64 f3]bytes') 
      THEN('The third read method call returns invalid_argument status') 
      THEN('After the third read method call, read buffer contains [e1 7c]bytes') 
      THEN('The fourth read method call returns crc_check_failed status') 
      THEN('After the fourth read method call, read buffer contains [d5 55]bytes') 
      THEN('The fifth read method call returns test_failed status') 
      THEN('After the fifth read method call, read buffer contains [2e 87]bytes') 
      THEN('The sixth read method call returns no_new_data status') 

SCENARIO('Mock I2CDevice works correctly for read method when called four times') 
  GIVEN('Freshly constructed mock device') 
    WHEN('The add_read method is called four times with input parametes,[27 b8] [64 f3] [e1 7c] [d5 55] bytes and [ok][read_error][invalid_arguments][ok]'
        'I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [27 b8]bytes') 
      THEN('The second read method call returns read_error status') 
      THEN('After the second read method call, read buffer contains [64 f3]bytes') 
      THEN('The third read method call returns invalid_argument status') 
      THEN('After the third read method call, read buffer contains [e1 7c]bytes') 
      THEN('The fourth read method call returns crc_check_failed status') 
      THEN('After the fourth read method call, read buffer contains [d5 55]bytes') 

SCENARIO('Mock I2CDevice works correctly for read method when called three times') 
  GIVEN('Freshly constructed mock device') 
    WHEN('The add_read method is called three times with input parametes,[27 b8] [64 f3] [e1 7c] bytes and [ok][ok][ok] I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [27 b8]bytes') 
      THEN('The second read method call returns ok status') 
      THEN('After the first read method call, read buffer contains [64 f3]bytes') 
      THEN('The third read method call returns ok status') 
      THEN('After the first read method call, read buffer contains [e1 7c]bytes') 

SCENARIO('Mock I2CDevice works correctly for read method when called seven times') 
  GIVEN('Freshly constructed mock device') 
    WHEN('The add_read method is called eight times with input parametes,[27 b8] [64 f3] [2f 1c] [39 25] [f3 9e] [a9 78] [9c 7f][9c 7f] and [ok][ok][ok][ok][ok][ok][ok][ok] I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [27 b8]bytes') 
      THEN('The second read method call returns ok status') 
      THEN('After the first read method call, read buffer contains [64 f3]bytes') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [2f 1c]bytes') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [39 25]bytes') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [fe 39]bytes') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [2f 1c]bytes') 
      THEN('The first read method call returns Ok status') 
      THEN('After the first read method call, read buffer contains [9c 7f]bytes') 


SCENARIO('I2C mock device works correctly for read method when in add_read method buffer size is greater than count') 
  GIVEN('Freshly constructed mock device') 
    WHEN('The add_read method is called with input parameters, 60 bytes [63 89 9a a9 27 54 0e 5e 90 '
        'c2 15 21 45 e1 e1 bb 99 55 73 a6 a4 04 27 ae 2d 1a f0 43 d6 76 d8 b6 ce 30 fc 89 e6 f2 e9 '
        'eb e0 73 a3 09 9a 4c 13 e3 ce 3f 9b 99 07 be be 5b 1d 7a 4a 8c ], followed by 25 data bytes [eb 65 a1 '
        '62 93 13 33 23 ff 97 ba 63 f2 46 46 dd 1a 64 a2 c1 50 04 d3 09 31] and ok '
        'I2CDeviceStatus') 
      THEN('The read method returns OK status') 
      THEN('The read method returns only first 50 data bytes [63 89 9a a9 27 54 0e 5e 90 c2 15 21 45 e1 '
          'e1 bb 99 55 73 a6 a4 04 27 ae 2d 1a f0 43 d6 76 d8 b6 ce 30 fc 89 e6 f2 e9 eb e0 73 a3 '
          '09 9a 4c 13 e3 ce 3f]') 
      THEN('The read method returns OK status') 
      THEN('The read method returns expected 25 data bytes [eb 65 a1 62 93 13 33 23 ff 97 ba 63 f2 '
          '46 46 dd 1a 64 a2 c1 50 04 d3 09 31]') 

SCENARIO('Mock I2CDevice works correctly for write method') 
  GIVEN('A freshly constructed mock device') 
    WHEN('The write method is called with input parameter, data bytes[d5 1a 7a bc 24] and Ok I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The get_write method returns ok status') 
      THEN('After the get_write method call, write buffer contains [d5 1a 7a bc 24] bytes') 

    WHEN('The write method is called with input parameter data [d5 1a 7a bc 24]bytes and write_error I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The get_write method returns ok status') 
      THEN('After the get_write method call, write buffer contains [d5 1a 7a bc 24] bytes') 

    WHEN('The write method is called with input parameter data [d5 1a 7a bc 24]bytes and not_supported I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The get_write method returns ok status') 
      THEN('After the get_write method call, write buffer contains [d5 1a 7a bc 24] bytes') 

    WHEN('The write method is called with input parameters, data [d5 1a 7a bc 24]bytes and no_new_data I2CDeviceStatus') 
      THEN('The count value returns 50') 
      THEN('The get_write method returns ok status') 
      THEN('After the get_write method call, write buffer contains [d5 1a 7a bc 24] bytes') 

SCENARIO('Mock device works correctly when write method is called five times') 
  GIVEN('Freshly constructed mock-device') 
    WHEN('The write method is called five times with buffer bytes [db fe] [79 4b] [cd 93] [5a 56] '
        '[22 19]and I2CDevice status as [Ok] [write_error] [test_failed] [no_new_data] [invalid_argument] ') 
      THEN('The count value returns 50')  
      THEN('After the first write method call, get_write returns ok status') 
      THEN('After the first write method call, get_write buffer contains [db fe] bytes') 
      THEN('After the second write call, get_write returns ok status') 
      THEN('After the second write call, get_write buffer contains [79 4b] bytes') 
      THEN('After the third write call, get_write returns ok status') 
      THEN('After the third write call, get_write buffer contains [cd 93] bytes') 
      THEN('After the fourth write call, get_write returns ok status') 
      THEN('After the fourth write call, get_write buffer contains [5a 56] bytes') 
      THEN('After the fifth write call, get_write returns ok status') 
      THEN('After the first write call, get_write buffer contains  [22 19] bytes') 

SCENARIO('Mock device works correctly when write method is called four times') 
  GIVEN('Freshly constructed mock-device') 
    WHEN('The write method is called five times with buffer bytes [db fe] [79 4b] [cd 93] [22 19] and I2CDevice status as [Ok] [write_error] [ok] [ok] ') 
      THEN('The count value returns 50')
      THEN('After the first write call, get_write returns ok status') 
      THEN('After the first write call, get_write buffer contains [db fe] bytes') 
      THEN('After the second write call, get_write returns ok status') 
      THEN('After the second write call, get_write buffer contains [79 4b] bytes') 
      THEN('After the third write call, get_write returns ok status') 
      THEN('After the third write call, get_write buffer contains [cd 93] bytes') 
      THEN('After the fifth write call, get_write returns ok status') 
      THEN('After the first write call, get_write buffer contains [22 19] bytes') 


SCENARIO('I2C mock device works correctly for get_write  method when write method has innput parameter buffer size '
    'greater than count, and OK I2C DeviceStatus') 
  GIVEN('Freshly constructed mock device') 
    WHEN('The write method is called with input parameters, 50 data bytes [63 89 9a a9 27 54 0e 5e 90 c2 '
        '15 21 45 e1 e1 bb 99 55 73 a6 a4 04 27 ae 2d 1a f0 43 d6 76 d8 b6 ce 30 fc 89 e6 f2 e9 eb '
        'e0 73 a3 09 9a 4c 13 e3 ce 3f 9b 99 07 be ] followed by 25 data bytes [eb 65 a1 62 93 13 33 23 ff 97 ba '
          '63 f2 46 46 dd 1a 64 a2 c1 50 04 d3 09 31] and [ok][ok] I2CDeviceStatus') 
      THEN('The get_write method returns OK status') 
      THEN('The get_write buffer contains only first 50 data bytes [63 89 9a a9 27 54 0e 5e 90 c2 15 21 45 '
          'e1 e1 bb 99 55 73 a6 a4 04 27 ae 2d 1a f0 43 d6 76 d8 b6 ce 30 fc 89 e6 f2 e9 eb e0 73 '
          'a3 09 9a 4c 13 e3 ce 3f]') 
      THEN('The get_write method returns OK status') 
      THEN('The get_write buffer contains expected 25 data bytes [eb 65 a1 62 93 13 33 23 ff 97 ba 63 f2 46 46 dd 1a 64 a2 c1 50 04 d3 09 31]') 

SCENARIO('Mock device works correctly when write method is called four times') 
  GIVEN('Freshly constructed mock-device') 
    WHEN('The write method is called three times with buffer bytes [db fe] [32 9b f7 4b] [cd 93]  and [Ok] [ok] [ok] I2CDevice status') 
      THEN('The count value returns 50') 
      THEN('After the first write call, get_write returns ok status') 
      THEN('After the first write call, get_write buffer contains [db fe] bytes') 
      THEN('After the second write call, get_write returns ok status') 
      THEN('After the second write call, get_write buffer contains [32 9b f7 4b] bytes') 
      THEN('After the third write call, get_write returns ok status') 
      THEN('After the third write call, get_write buffer contains [cd 93] bytes') 
      THEN('After the fourth write call, get_write returns no_new_data status') 

SCENARIO('Mock device works correctly when write method is called once') 
  GIVEN('Freshly constructed mock-device') 
    WHEN('The write method is called two times with buffer bytes [db fe] [32 9b f7 4b] and I2CDevice status as [Ok] [OK] ') 
      THEN('The count value returns 50') 
      THEN('After the first write call, get_write returns ok status') 
      THEN('After the first write call, get_write buffer contains [db fe] bytes') 
