Scenario : The StateMachine::update method works correctly 
  GIVEN(' A state machine is constructed') 
    WHEN('The update method is called once with 4000 as input parameter ') 
      THEN('The update method returns wait_warmup action') 
      THEN('After the update method output method returns wait_warmup action')
    WHEN('The update method is called twice with 4000us as input parameter for both cases') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action')
      THEN('The second update method call returns wait_warmup action') 
      THEN('After the second update method, output method returns wait_warmup action')
    WHEN('The update method is called thrice with [4000, 100, 5000] as input parameter') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action')
      THEN('The second update method call, returns check_range action') 
      THEN('After the second update method, output method returns check_range action')
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action')
    WHEN('The update method is called four times with [4000, 250, 500, 100] as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action')
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action')
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action')
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method output method returns measure action')
    WHEN('The update method is called four times with [4000, 3999, 3500, 3000] as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action')
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action')
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action')
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method, output method returns measure action')
    WHEN('The update method is called three times with [4000, 5000, 6000] as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action')
      THEN('The second update method call returns wait_warmup action') 
      THEN('After the second update method, output method returns wait_warmup action')
      THEN('The third update method call returns wait_warmup action') 
      THEN('After the third update method, output method returns wait_warmup action')
    WHEN('The update method is called three times with [4000, 5000, 500] as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action')
      THEN('The second update method call returns wait_warmup action') 
      THEN('After the second update method, output method returns wait_warmup action')
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns check_range action')
    WHEN('The update method is called five times with [500, 250, 5000, 6000, 200] as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action')
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action')
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action')
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method, output method returns measure action')
      THEN('The fourth update method call returns wait_measurement action') 
      THEN('After the fourth update method, output method returns wait_measurement action')

Scenario : The Sensor::setup method works correctly 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) '
      'and[00 aa a6 ae dd 5b 00 00 81](as read_conversion_factor response), reseter is set to false and mock time set to 100us') 
    WHEN('The setup method is called thrice , where mock read buffer is appended with bytes [97 38 1e](as read_sample response) and junk bytes [01 02]and mock '
        'time is set to [100, 40000, 50000] before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After second setup method call, get_state returns check_range action ') 
      THEN('The third setup method call retuns ok state') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns junk bytes [01 02]') 
    WHEN('The setup method is called twice , where mock read buffer is appended with bytes [97 38 1e](as read_sample response) and junk bytes [01 02] and mock '
        'time is set to [100, 200] before each corresponding setup call') 
      THEN('The first setup method returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method returns setup state') 
      THEN('After the second setup method call,  get_state method returns wait_warmup action ') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns bytes [97 38 1e]') 
    WHEN('The setup method is called twice , where mock read buffer  is appended with bytes [15 35 a8](as read_sample response) and junk bytes [01 02] and mock '
        'time is set to [100, 100] before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns wait_warmup action ') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns bytes [15 35 a8]') 
    WHEN('The setup method is called thrice , where mock read buffer  is appended with bytes [15 35 a8](as read_sample response) and junk bytes [01 02] and mock '
        'time is set to [100, 55000, 40000] before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns junk bytes [01 02]') 
    WHEN('The setup method is called thrice , where mock read buffer  is appended with bytes [d5 64 4d](as read_sample response) and junk bytes [01 02]and mock '
        'time is set to [100, 45000, 40000] before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method retuns ok state') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns bytes [01 02]') 
    WHEN('The setup method is called twice , where mock read buffer  is appended with bytes [d5 64 4d](as read_sample response) and junk bytes [01 02] and mock '
        'time is set to [100, 5000] before each corresponding setup call') 
      THEN('The first setup method returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method returns setup state') 
      THEN('After the second setup method call, get_state method returns wait_warmup action ') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns bytes [d5 64 4d]') 
    WHEN('The setup method is called thrice , where mock read buffer  is appended with bytes [d5 64 4d](as read_sample response) and junk bytes [01 02]and mock '
        'time is set to [45000, 40000, 39000] before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method retuns ok state') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns bytes [01 02]') 

Scenario : The Sensor::output method works correctly 
  GIVEN('SFMC3019 sensor is fully initialised by calling setup method until it returns ok and action returns wait_measurement with the mock read buffer consisting of [97 38 1e 97 38 1e](as read_sample response) and junk bytes [01 02] appended afterwords and with the mock time set to 100us') 
    WHEN('The output method is called thrice with mock time set to [40000,1000, 2000] and output parameter flow is set to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action ') 
      THEN('The output parameter flow returns 20.5')
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement method') 
      THEN('The output parameter flow returns -35.60588F value') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns junk bytes [01 02]') 
    WHEN('The output method is called thrice with mock time set to [40000, 500, 100] and output parameter flow is set to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The  second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow returns 20.5')
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow returns -35.60588F value') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns junk bytes [01 02]') 

  GIVEN('SFMC3019 sensor is fully initialised by calling setup method until it returns ok and action returns wait_measurement with the mock read buffer consisting of [15 35 a8 15 35 a8](as read_sample response) and junk bytes [01 02] appended afterwords and with the mock time set to 100us') 
    WHEN('The output method is called thrice with mock time set to [40000, 1000, 100], and output parameter flow is set to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow returns 20.5')
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow returns 154.11765f value') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns  junk bytes [01 02]') 
    WHEN('The output method is called thrice with mock time set to [40000, 500, 250] and output parameter flow is set to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow returns 20.5')
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow returns 154.11765f value') 
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns  junk bytes [01 02]') 
    WHEN('The output method is called twice with mock time set to [4000] for both calls and output parameter flow is set to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow returns 20.5')
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns [15 35 a8]') 

  GIVEN('SFMC3019 sensor is partially initialised by calling setup method where it returns setup state and action returns wait_warmup with the mock read buffer consisting of [d5 64 4d](as read_sample response)  and with the mock time set to 500us') 
    WHEN('The output method is called once, mock time is set to [250]and output parameter flow is set to 20.5') 
      THEN('The output method returns failed state') 
      THEN('After  output method call, get_state method returns wait_warmup action') 
      THEN('The output parameter flow returns 20.5')
      THEN('The mock_device I2C's write buffer returns command byte 0xE102') 
      THEN('The mock_device I2C's read buffer returns [d5 64 4d]') 

  GIVEN('SFMC3019 sensor is partially initialised by calling setup method where it returns setup and action returns check_range with the mock read buffer consisting of [d5 64 4d](as read_sample response) and with the mock time set to 500us') 
    WHEN('The output method is called once, mock time is set to [250]and output parameter flow is set to 20.5') 
      THEN('The output method call returns failed state') 
      THEN('After output method call, get_state method returns check_range action') 
      THEN('The output parameter flow returns 20.5')
      THEN('The mock_device I2C's write buffer returns command byte 0xE102') 
      THEN('The mock_device I2C's read buffer returns [d5 64 4d]') 
