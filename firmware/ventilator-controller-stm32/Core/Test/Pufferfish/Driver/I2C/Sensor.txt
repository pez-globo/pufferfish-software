Scenario : The StateMachine::update method works correctly 
  GIVEN(' A state machine is constructed') 
    // update method is called only once with time 4000us, action state returns wait_warmup
    WHEN('The update method is called once with 4000us as input parameter ') 
      THEN('The update method returns wait_warmup action') 
      THEN('After the update method, output method returns wait_warmup action') 

    // update method is called twice, with 4000us as mock time for both cases, action return
    // wait_warmup
    WHEN('The update method is called twice with 4000us as input parameter for both cases') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns wait_warmup action') 
      THEN('After the second update method, output method returns wait_warmup action') 

    // update method called thrice with [4000, 100, 5000]us as input, action returns check_range
    WHEN('The update method is called thrice with [4000, 100, 5000]us as input parameter') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call, returns check_range action') 
      THEN('After the second update method, output method returns check_range action') 
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action') 

    // update method called four times [4000, 250, 500, 100]us as input, after final call action
    // returns wait_measurement
    WHEN('The update method is called four times with [4000, 250, 500, 100]us as input parameter') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action') 
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action') 
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method output method returns measure action') 

  GIVEN('The freshly constructed state machine') 
    WHEN('The update method is called four times with [4000, 3999, 3500, 3000]us as input parameter ') 
      // time difference before every consecutive update call is set to 1,500,1000
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action') 
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action') 
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method, output method returns measure action') 

    // Action does not advance from wait_warmup as
    // 'warmup_timer_.within_timeout(current_time_us)returns true
    WHEN('The update method is called three times with [4000, 5000, 6000]us as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns wait_warmup action') 
      THEN('After the second update method, output method returns wait_warmup action') 
      THEN('The third update method call returns wait_warmup action') 
      THEN('After the third update method, output method returns wait_warmup action') 

Scenario : The uodate method works correctly for when input time is varied 
  GIVEN('The freshly constructed state machine') 
    // update method is called five time, for last three calls, action returns  wait_measurement
    // measure - wait_measurement
    WHEN('The update method is called five times with [500, 250, 5000, 6000, 200]us as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action') 
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action') 
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method, output method returns measure action') 
      THEN('The fourth update method call returns wait_measurement action') 
      THEN('After the fourth update method, output method returns wait_measurement action') 

    // when update method is called 7 times, action returns wait_measurement - measure -
    // wait_measurement
    WHEN('The update method is called seven times with [500, 250, 5000, 6000, 200, 500, 500]us as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action') 
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action') 
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method, output method returns measure action') 
      THEN('The fourth update method call returns wait_measurement action') 
      THEN('After the fourth update method, output method returns wait_measurement action') 
      THEN('The fifth and sixth update method call returns wait_measurement action') 
      THEN('After the fifth and sixth update method, output method returns wait_measurement action') 

    // update method is called four times, action returns wait_measuremet
    // but'warmup_timer_.within_timeout(current_time_us)' true, so even after fourth call, action
    // still
    // returns wait_measurement
    WHEN('The update method is called four times with [500, 250, 5000]us as input parameter and for fourth call input parameter remains same as for third call ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns check_range action') 
      THEN('After the second update method, output method returns check_range action') 
      THEN('The third update method call returns wait_measurement action') 
      THEN('After the third update method, output method returns wait_measurement action') 
      THEN('The fourth update method call returns measure action') 
      THEN('After the fourth update method, output method returns measure action') 

Scenario : The StateMachine::update method works correctly for relatively small interval of time as input
  GIVEN(' A freshly contructed state machine') 
//input parameter time is varied having small interval, action changes to wait_warmup, and remains same after 4 calls    
    WHEN('The update method is called five times with [100, 299, 300, 301, 302]us as input parameter ') 
      THEN('The first update method call returns wait_warmup action') 
      THEN('After the first update method, output method returns wait_warmup action') 
      THEN('The second update method call returns wait_warmup action') 
      THEN('After the second update method, output method returns wait_warmup action') 
      THEN('The third update method call returns wait_warmup action') 
      THEN('After the third update method, output method returns wait_warmup action') 
      THEN('The fourth update method call returns wait_warmup action') 

Scenario : The Sensor::setup method works correctly 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) '
      'and[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) and [97 38 1e](as read_sample response) followed by junk bytes [01 02], reseter is set to '
      'false and mock time is set to 100us, global device's mock write buffer is set to [01] byte') 
    // Setup method called thrice, action returns wait_measurement action
    WHEN('The setup method is called thrice , mock time is set to [100, 40000, 50000]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After second setup method call, get_state returns check_range action ') 
      THEN('The third setup method call retuns ok state') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

    // setup method called twice and enough time is not elapsed , so action still returns
    // wait_warmup
    WHEN('The setup method is called twice , mock time is set to [100, 200]us before each corresponding setup call') 
      THEN('The first setup method returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method returns setup state') 
      THEN('After the second setup method call,  get_state method returns wait_warmup action ') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains bytes [97 38 1e]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) '
      'and[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) and [15 35 a8](as read_sample response) followed by junk bytes [01 02], reseter is set to '
      'false and mock time is set to 100us, global device's mock write buffer is set to [01] byte') 

    // setup method called twice, action returns check_range
    WHEN('The setup method is called twice ,mock time is set to [100, 500]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action ')       THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer consists bytes [15 35 a8]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

Scenario : The Sensor::setup method works correctly for different mock read buffer 
  // Data in mock read buffer contains wrong product id
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[97 38 1e] (as a read_product_id response), '
      ' reseter is set to false and mock time is set to 100us, global device's mock write buffer is '
      'set to [01] byte') 
    WHEN('The setup method is called once ,time is set to 100us before setup call') 
      THEN('The first setup method call returns failed state') 
      THEN('After first setup method call, get_state method returns initialize action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains no_new_data') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  // wrong mock buffer for read_conversion_factors
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) followed by [97 38 1e](as '
      'read_conversion_factors response) '
      ' reseter is set to false and mock time is set to 100us, global device's mock write buffer is '
      'set to [01] byte') 
    WHEN('The setup method is called once ,time is set to 100us before setup call') 
      THEN('The first setup method call returns failed state') 
      THEN('After first setup method call, get_state method returns initialize action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02 00 00 00]') 
      THEN('The mock_device I2C's read buffer contains no_new_data') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  // //in check_range method, read_sample condition flow is 218.682 greater than flow max
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) '
      'and[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) [01 00 '
      'b1](as read_sample response) followed by junk bytes [01 02] , reseter is set to '
      'false and mock time is set to 100us, global device's mock write buffer is set to [01] byte') 
    WHEN('The setup method is called thrice , mock time is set to [100, 55000, 40000]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call returns setup state') 
      THEN('After the third setup method call, get_state method returns check_range action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains no_new_data') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

Scenario : The Sensor::setup method works correctly when resetter is set to true 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) '
      'and[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response), [15 35 '
      'a8](as read_sample response) followed by junk bytes [01 02], reseter is set to '
      'true and mock time is set to 100us, global device's mock write buffer is set to [01] byte') 
    WHEN('The setup method is called thrice , where mock time is set to [100, 55000, 40000]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer contains [06] byte') 

Scenario : The Sensor::setup method works correctly when mock read buffer is different than expected data 
  // wrong data for product id, after 8 tries it fails
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[00 aa a6 a0 00 7e 01 48 f1]  (as a read_product_id response) '
      ' reseter is set to false and mock time set to 100us, global device's mock write buffer is '
      'set to [01] byte') 
    THEN('The first setup method call returns failed state') 
    THEN('After first setup method call, get_state method returns initialize action') 
    THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
    THEN('The mock_device I2C's read buffer contains no_new_data') 
    THEN('The global_device I2C's read buffer is empty') 
    THEN('The global_device I2C's write buffer remains unchanged') 

  // read buffer for read_conversion_factor is wrong, after 8 re-tries it fails
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) '
      'and[04 02 60 06 11 a9 00 00 81](as read_conversion_factor response), reseter is set to '
      'false and mock time is set to 100us, global device's mock write buffer is set to [01] byte') 
    WHEN('The setup method is called once , where mock time is set to 100us before corresponding setup call') 
      THEN('The first setup method call returns failed state') 
      THEN('After the first setup method call, get_state method returns initialize action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02 00 00 00]') 
      THEN('The mock_device I2C's read buffer contains no_new_data') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  // First 36 bytes fails read_product_id conditions(first 4 retry_count fails), it passes on next
  // retry count
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[00 aa a6 a0 00 7e 00 00 81 00 aa a6 a0 00 7e 00 00 81 00 aa a6 a0 00 7e 00 00 81 00 aa a6 a0 00 7e 00 00 '
      '81 04 02 60 06 11 a9 00 00 81] (as a read_product_id response) and[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) [15 35 '
      'a8](as read_sample response) followd by junk bytes [01 02], reseter is set to false and mock time set to 100us, global device's mock write buffer is set to [01] byte') 

    WHEN('The setup method is called thrice , where  mock time is set to [100, 55000, 40000]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

Scenario : The Sensor::setup method works correctly for differnt mock time
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) '
      'and[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) and [15 35 '
      'a8](as read_sample response) followed by junk bytes [01 02] , reseter is set to '
      'false and mock time set to 100us , global device's mock write buffer is set to [01] byte') 

    // Setup method called thrice, action returns wait_measurement
    WHEN('The setup method is called thrice , where mock time is set to [100, 55000, 40000]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

    // setup method called twice, enough time is not elapsed, action returns wait_warmup
    WHEN('The setup method is called twice, mock time is set to [100, 5000]us before each corresponding setup call') 
      THEN('The first setup method returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method returns setup state') 
      THEN('After the second setup method call, get_state method returns wait_warmup action ') 
      THEN('The mock_device I2C's write buffer contains command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer contains bytes [d5 64 4d]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

Scenario : The Sensor::output method works correctly
  GIVEN('SFMC3019 sensor is fully initialised by calling setup method until it returns ok and action returns wait_measurement with the mock read buffer consisting of [97 38 1e 97 38 1e](as read_sample response) followed by junk bytes [01 02],  and with the mock time set '
      'to 100us, global device's mock write buffer is set to [01] byte') 
    WHEN('The output method is called thrice with mock time set to [40000,1000, 2000]us and output parameter flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action ') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement method') 
      THEN('The output parameter flow is set to -13.22353F value')  
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

    WHEN('The output method is called thrice with mock time set to [40000, 500, 100]us and output parameter flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The  second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow is set to -13.22353F value')  
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

Scenario : The Sensor::output method works correctly for different mock read buffer and for mock time 100 
  GIVEN('SFMC3019 sensor is fully initialised by calling setup method until it returns ok and action '
      'returns wait_measurement with the mock read buffer consisting of [15 35 a8 15 35 a8](as read_sample response) followed by junk bytes [01 02], the mock time is set '
      'to 100us, global device's mock write buffer is set to [01] byte') 
    WHEN('The output method is called thrice with mock time set to [40000, 1000, 100]us, and output parameter flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow is set to 176.5F value')  
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns  junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

    WHEN('The output method is called thrice with mock time set to [40000, 500, 250]us and output parameter flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The third output method call returns setup state') 
      THEN('After the third output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow is set to 176.5F value')  
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns  junk bytes [01 02]') 

    WHEN('The output method is called twice with mock time set to 4000us for both calls and output parameter flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The mock_device I2C's write buffer returns command byte [E1 02]') 
      THEN('The mock_device I2C's read buffer returns [15 35 a8]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

Scenario : The Sensor::output method works correctly for different mcok read buffer and 500 mock time 
  GIVEN('SFMC3019 sensor is partially initialised by calling setup method where it returns setup state and '
      'action returns wait_warmup, with the mock read buffer consisting of [d5 64 4d](as read_sample response) and with the mock time set to 500us, global device's mock write buffer is set to [01] byte') 
    WHEN('The output method is called once, mock time is set to 250us and output parameter flow is initialized to 20.5') 
      THEN('The output method returns failed state') 
      THEN('After  output method call, get_state method returns wait_warmup action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The mock_device I2C's write buffer returns command byte 0xE102') 
      THEN('The mock_device I2C's read buffer returns [d5 64 4d]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 

Scenario : The Sensor::output method works correctly for different mcok read buffer 
  GIVEN('SFMC3019 sensor is partially initialised by calling setup method where it returns setup and action returns check_range with the mock read buffer consisting of [d5 64 4d](as '
      'read_sample response) and with the mock time set to 500us, global device's mock write buffer is set to [01] byte') 
    WHEN('The output method is called once, mock time is set to 250us and output parameter flow is initialized to 20.5') 
      THEN('The output method call returns failed state') 
      THEN('After output method call, get_state method returns check_range action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The mock_device I2C's write buffer returns command byte 0xE102') 
      THEN('The mock_device I2C's read buffer returns [d5 64 4d]') 
      THEN('The global_device I2C's read buffer is empty') 
      THEN('The global_device I2C's write buffer remains unchanged') 
