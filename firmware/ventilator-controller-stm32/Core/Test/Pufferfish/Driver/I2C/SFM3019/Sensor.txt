SCENARIO: The Sensor::setup method works correctly for normal cases when action cycles form wait_warmup-check_range 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 '
      '11 a9 00 00 81] (as a read_product_id response) followd by '
      '[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) and [97 38 '
      '1e](as read_sample response) and junk bytes [01 02], reseter is set to '
      'false and mock time is set to 100us, global device's mock write buffer is set to [01] '
      'byte and read buffer is set to [01 02] bytes') 
    // normal case, Action goes from wait_warmup-check_range
    WHEN('The setup method is called twice , mock time is set to [100, 31000]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After second setup method call, get_state returns check_range action ') 
      THEN('Command bytes [E1 02](request_product_id)followed by [36 61](read_conversion) and [36 6A](set_averaging) and[36 03](O2 gas) are added to mock device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer contains bytes [97 38 1e] followed by junk bytes [01 02]') 
      THEN('The mock_device I2C's read buffer becomes empty') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly for normal cases when action cycles form check_range-wait_measurement 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response) followed by '
      '[00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) and [97 38 '
      '1e](as read_sample response) and junk bytes [01 02], reseter is set to '
      'false and mock time is set to 100us, global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    // normal case, action goes from check_range to wait_measurement
    WHEN('The setup method is called thrice , mock time is set to [100, 31000, 31000]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After second setup method call, get_state returns check_range action ') 
      THEN('The third setup method call retuns ok state') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('Command bytes [E1 02](request_product_id)followed by [36 61](read_conversion) and [36 6A](set_averaging) and[36 03](O2 gas) are added to mock device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer only contains junk bytes [01 02]') 
      THEN('The global_device I2C's read remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly when enough time is not elapsed and for cycle wait_warmup-check_range action 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 11 a9 00 00 81] (as a read_product_id response)followed by [00 aa a6 a0 00 7e 00 00 81](as read_conversion_factor response) and [15 35 '
      'a8](as read_sample response) and junk bytes [01 02] , reseter is set to '
      'false and mock time set to 100us , global device's mock write buffer is set to [01] byte '
      'and read buffer is set to [01 02] bytes') 
    // Enough time is not elapsed between two setup calls, timeout condition is not satisfied
    //  Action remains wait_warmup instead of check_range
    WHEN('The setup method is called twice, mock time is set to [100, 5000]us before each corresponding setup call') 
      THEN('The first setup method returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method returns setup state') 
      THEN('After the second setup method call, get_state method returns wait_warmup action ') 
      THEN('Command bytes [E1 02](request_product_id)followed by [36 61](read_conversion) and [36 6A](set_averaging) and[36 03](O2 gas) are added to mock device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer contains bytes [15 35 a8] followed by junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly for different mock read buffer 
  // Data in mock read buffer contains wrong product id
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[97 38 1e]  '
      '(as invalid read_product_id response), reseter is set to false and mock time is set to 100us,'
      ' global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called once ,time is set to 100us') 
      THEN('The first setup method call returns failed state') 
      THEN('After first setup method call, get_state method returns initialize action') 
      THEN('Command bytes [E1 02](request_product_id) are added to mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer becomes empty') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  // wrong mock buffer for read_conversion_factors
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[04 02 60 06 11 a9 00 00 81] (as valid read_product_id response) followed by [97 38 1e](as '
      ' invalid read_conversion_factors response), reseter is set to false and mock time is set to 100us,'
      ' global device's mock write buffer is set to [01] byte and read buffer is set to [01 02]') 
    WHEN('The setup method is called once ,time is set to 100us') 
      THEN('The setup method call returns failed state') 
      THEN('After setup method call, get_state method returns initialize action') 
      THEN('Command bytes [E1 02](request_product_id) and [36 61](read_conversion) are added to mock_device I2C's write buffer ') 
      THEN('The mock_device I2C's read buffer becomes empty') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly when flow is greater than the pre-defined limit 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 '
      'a9 00 00 81] (as valid read_product_id response) followed by [00 aa a6 a0 00 7e 00 00 81](as valid read_conversion_factor response) and [01 00 b1](as valid read_sample response) 
      'and junk bytes [01 02] , reseter is set to false and mock time is set to 100us,'
      ' global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    // in check_range method, read_sample condition flow is 218.682, greater than flow max
    WHEN('The setup method is called thrice , mock time is set to [100, 55000, 55001]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call returns setup state') 
      THEN('After the third setup method call, get_state method returns check_range action') 
      THEN('Command bytes [E1 02](request_product_id)followed by [36 61](read_conversion)and [36 6A](set_averaging) and [36 03](O2 gas) are added to  mock_device I2C's write buffer ') 
      THEN('The mock_device I2C's read buffer becomes empty') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly when resetter is set to true
//reseter is set to true 
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 '
      'a9 00 00 81] (as valid read_product_id response) followed by [00 aa a6 a0 00 7e 00 00 81](as valid read_conversion_factor response)and ' 
      [15 35 a8](as valid read_sample response) and junk bytes [01 02], reseter is set to true and mock time is set to 100us,'
      'global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called thrice , where mock time is set to [100, 55000, 55001]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('Command bytes [E1 02](request_product_id)followed by [36 61](read_conversion) and [36 6A](set_averaging) and [36 03](O2 gas) are added to mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer only contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer contains [06] byte') 

SCENARIO: The Sensor::setup method works correctly when mock read buffer is different than expected, setup method retries for maximum allowed times 
  // wrong data for product id, after 8 fault_counts it fails
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting of[00 aa a6 a0 00 7e 01 48 f1]  (as  invalid read_product_id response) '
      ' reseter is set to false and mock time is set to 100us,'
      'global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called once ,time is set to 100us') 
      THEN('The setup method call returns failed state') 
      THEN('After setup method call, get_state method returns initialize action') 
      THEN('Command bytes [E1 02] (request_product_id) are added to mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer becomes empty') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  //first 4 fault_counts fails, it passes on next count
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of 4 repetition '
      'of[00 aa a6 a0 00 7e 00 00 81](as invalid read_product_id response) followed by [04 02 60 06 11 a9 00 00 81] (as valid '
      'read_product_id response) and[00 aa a6 a0 00 7e 00 00 81](as valid read_conversion_factor response) and [15 35 '
      'a8](as valid read_sample response) and junk bytes [01 02], reseter is set to false and mock time set to 100us,'
      ' global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called thrice , where  mock time is set to [100, 55000, 55100]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('Command bytes [E1 02](request_product_id)followed by [36 61](read_conversion)and [36 6A](set_averaging) and [36 03](O2 gas) are added to mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer only contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly when mock read buffer for read_product_id is different than expected, setup method retries for maximum allowed tries 
  // wrong read buffer for read_product_id conditions(first 7 fault_counts fails), it passes on last count
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of 7 repetition of[00 aa a6 a0 00 7e 00 00 81] bytes (as invalid response)'
      ' followed by [04 02 60 06 11 a9 00 00 81] (as valid read_product_id response) and[00 aa a6 a0 00 7e 00 00 81](as valid read_conversion_factor response)'
      ' and [15 35 a8](as read_sample response) and junk bytes [01 02], reseter is set to false and mock time set to 100us,'
      ' global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called thrice , where  mock time is set to [100, 55000, 55200]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('Command bytes [E1 02](request_product_id) followed by [36 61](read_conversion) and [36 6A](set_averaging) and [36 03](O2 gas) are added to  mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer only contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly when mock read buffer for read_conversion_factor is different than expected, setup method retries for maximum allowed times
  // read buffer for read_conversion_factor is wrong, after 8 fault_counts it fails
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 a9 00 00 81] (as a valid read_product_id response)'
      'followed by [04 02 60 06 11 a9 00 00 81](as invalid read_conversion_factor response), reseter is set '
      'to false and mock time is set to 100us, global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called once , where mock time is set to 100us before corresponding setup call') 
      THEN('The first setup method call returns failed state') 
      THEN('After the first setup method call, get_state method returns initialize action') 
      THEN('Command bytes [E1 02](request_product_id)followed by [36 61](read_conversion) are added to mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer becomes empty') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  // wrong read buffer for read_conversion_factors conditions(first 7 fault_counts fails), it passes on last count
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consists of[04 02 60 06 11 a9 00 00 81] (as a valid read_product_id response) '
      'followed by 7 repetition of [04 02 60 06 11 a9 00 00 81] bytes(invalid read_conversion_factor '
      'response) and [00 aa a6 a0 00 7e 00 00 81](as valid read_conversion_factor response) and[15 35 a8](as read_sample response) '
      'and junk bytes [01 02], reseter is set to false and mock time set to 100us,'
      ' global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called thrice , where  mock time is set to [100, 55000, 55200]us before each corresponding setup call') 
      THEN('The first setup method call returns setup state') 
      THEN('After the first setup method call, get_state method returns wait_warmup action') 
      THEN('The second setup method call returns setup state') 
      THEN('After the second setup method call, get_state method returns check_range action') 
      THEN('The third setup method call retuns ok status') 
      THEN('After the third setup method call, get_state method returns wait_measurement action') 
      THEN('Command bytes [E1 02](request_product_id) followed by [36 61](read_conversion) and [36 6A](set_averaging)and [36 03](O2 gas) are added to mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer only contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::setup method works correctly when mock read buffer is different than expected , setup method retries for maximum allowed times and fails 
  // 4 repetition invalid read product id buffer , 1 valid read_product_id buffer, 5 repetition of invalid read_conversion_factor buffer  and 1 valid  read_conversion_factor buffer.
  //  Exceeds max fault_counts, setup returns failed state
  GIVEN('SFMC3019 sensor is created with mock I2C device with read buffer consisting 4 repetition '
      'of[00 aa a6 a0 00 7e 01 48 f1] bytes  (invalid read_product_id response) followed by [04 02 60 06 11 a9 00 00 '
      '81](as valid read_product_id response), and 5 repetition of [04 02 60 06 11 a9 00 00 81]bytes '
      '(invalid read_conversion_factor response) and [00 aa a6 a0 00 7e 01 48 f1] (as valid read_conversion_factor response )reseter is set to '
      'false and mock time set to 100us, global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes') 
    WHEN('The setup method is called once ,time is set to 100us before setup call') 
      THEN('The first setup method call returns failed state') 
      THEN('After first setup method call, get_state method returns initialize action') 
      THEN('Command bytes [E1 02](request_product_id) followed by [36 61](read_conversion) are added to mock_device I2C's write buffer') 
      THEN('The mock_device I2C's read buffer only contains [00 aa a6 00 7e 01 48 f1]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::output method works correctly for action wait_measurement - measure - wait_measurement 
  GIVEN('SFMC3019 sensor is fully initialised by calling setup method until it returns ok, and get_state '
      'returns wait_measurement, and mock time is set to 100us,'
      ' and global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes.'
      'Mock read buffer consisting of [97 38 1e 97 38 1e](as read_sample response) followed by junk bytes [01 02] and ,mock_device I2C's write buffer is emptied out') 
    // Normal case, output returns ok state
    // updates flow according to read buffer
    WHEN('The output method is called thrice with mock time set to [40000,1000, 2000]us and output parameters flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action ') 
      THEN('The output parameter flow remains 20.5') 
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow gets updated to -13.22353F value') 
      THEN('The mock_device I2C's write buffer remains unchanged') 
      THEN('The mock_device I2C's read buffer only contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::output method works correctly when action cycles between  wait_measurement - measure 
  GIVEN('SFMC3019 sensor is fully initialised by calling setup method until it returns ok and get_state '
      'returns wait_measurement, mock time is set to 100us,'
      ' global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes.'
      'The mock read buffer consisting of [15 35 a8 15 35 a8](as read_sample response) followed by junk bytes [01 02],and mock_device I2C's write buffer is emptied out') 
    // action remains measure
    // flow does not get updated
    WHEN('The output method is called twice with mock time set to [40000, 1000]us, and output parameter flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow remains 20.5')  
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns measure action') 
      THEN('The output parameter flow remains 20.5') 
      THEN('The mock_device I2C's write buffer remains unchanged') 
      THEN('The mock_device I2C's read buffer contains bytes [15 35 a8] and junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

    // Action remains wait_measurement
    // Flow does not get updated
    WHEN('The output method is called twice with mock time set to [40000, 40000]us and output parameter flow is initialized to 20.5') 
      THEN('The first output method call returns ok state') 
      THEN('After the first output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow remains 20.5') 
      THEN('The second output method call returns ok state') 
      THEN('After the second output method call, get_state method returns wait_measurement action') 
      THEN('The output parameter flow remains 20.5') 
      THEN('The mock_device I2C's write buffer remains unchanged') 
      THEN('The mock_device I2C's read buffer contains [15 35 a8] bytes and junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

SCENARIO: The Sensor::output method works correctly, when sensor is partially initialized 
  GIVEN('SFMC3019 sensor is partially initialised by calling setup method once, where it returns setup state and '
      'get_state returns wait_warmup, and  the mock time set to 500us,' 
      'global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes,' 
      'The mock read buffer consisting of [d5 64 4d](as read_sample response) ,and mock_device I2C's write buffer is emptied out') 
    // Action is wait_warmup, output method fails
    // flow does not get updated
    WHEN('The output method is called once, mock time is set to 250us and output parameter flow is initialized to 20.5') 
      THEN('The output method returns setup state') 
      THEN('After  output method call, get_state method returns wait_warmup action') 
      THEN('The output parameter flow remains 20.5') 
      THEN('The mock_device I2C's write buffer remains unchanged') 
      THEN('The mock_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

  GIVEN('SFMC3019 sensor is partially initialised by calling setup method multiple times until it '
      'returns setup and get_state returns check_range, and the mock time is set to 500us,'
      'global device's mock write buffer is set to [01] byte and read buffer is set to [01 02] bytes.'
      'The mock read buffer consisting of [d5 64 4d](as read_sample response), and mock_device I2C's write buffer is emptied out') 
    // Action is check_range, output method fails
    WHEN('The output method is called once, mock time is set to 250us and output parameter flow is initialized to 20.5') 
      THEN('The output method returns setup state') 
      THEN('After  output method call, get_state method returns check_range action') 
      THEN('The output parameter flow remains 20.5') 
      THEN('The mock_device I2C's write buffer remains unchanged') 
      THEN('The mock_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's read buffer remains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 

// read_sample data is corrupted, output should return failed state
SCENARIO: The Sensor::output method works correctly when read buffer is corrupted 
  GIVEN('SFMC3019 sensor is fully initialised by calling setup method repeatedly until it returns ok and'
      'get_state returns wait_measurement, the mock time is set to 100us, 
      'global device's mock write buffer is set to [01] byte and read buffer is set to [01 02];'
      'The mock_device I2C's read buffer consists of 9 repition of[0f 80 4b]bytes (as invalid read_sample response) followed by junk bytes [01 02], and mock_device I2C's write buffer is emptied out') 
    // Wrong 9 repetition of bytes in read buffer, fault_count execeeds its maximum allowed value, output method call fails
    //for 19th output method, fault_count reaches 9, and then output method call fails 
    //Output method never changes output parameter flow. get_state method call returns measure action
    WHEN('The output method is called twenn times with mock time set in a regular patterns of [1000, 1000, 1500, 1500 2000, 2000 ...., 5000, 5000,5500]us and output parameter flow is initialized to 20.5') 
      THEN('Each of first eighteen output method calls return ok state') 
      THEN('After each of thoese output method calls, output parameter flow remains 20.5') 
      THEN("After the  0th,2nd,4th...,18th output method calls, get_state methods returns wait_measurement action")
      THEN("After the 1st,3rd,5th...,17th output methid calles, get_state methods returns measure action")      
      THEN('The nineteenth output method call returns failed state') 
      THEN('After the nineteenth output method call, get_state method returns measure action') 
      THEN('The 20th output method call also returns failed state')
      THEN('After the 20th output method call, get_state method returns measure action')
      THEN('The output parameter flow remains 20.5') 
      THEN('The mock_device I2C's write buffer remains unchanged') 
      THEN('The mock_device I2C's read buffer only contains junk bytes [01 02]') 
      THEN('The global_device I2C's read buffer reamains unchanged') 
      THEN('The global_device I2C's write buffer remains unchanged') 
