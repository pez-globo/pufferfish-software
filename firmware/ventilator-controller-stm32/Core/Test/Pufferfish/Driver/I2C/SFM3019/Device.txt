Scenario: SFM3019 Device:: SFM3019 device behaves correctly when start_measure function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device global I2C device and gas parameter') 
    WHEN('GasType O2 is passed as input parameter to device ') 
      THEN('The start_measure returns ok')
      THEN('The mock I2C's write buffer consists of start measure O2 command byte '0x3603'') 

    WHEN('GasType gas is passed as input parameter to device') 
      THEN('The start_measure returns ok')
      THEN('The mock I2C's write buffer consists of start measure air command byte '0x3608'') 

    WHEN('GasType mixture is passed as input parameter to device') 
      THEN('The start_measure returns ok')
      THEN('The mock I2C's write buffer consists of start measure mixture command byte '0x3632'') 

Scenario: SFM3019 Device:: SFM3019 device behaves correctly when stop_measure function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device global I2C device and gas parameter ')
    WHEN('GasType O2 is passed as input parameter to device')
      THEN('The stop_measure returns ok')
      THEN('The mock I2C's write buffer consists of stop measure O2 command byte '0x3FF9'') 

    WHEN('GasType air is passed as input parameter to device')
      THEN('The stop_measure returns ok')
      THEN('The mock I2C's write buffer consists of stop measure air command byte '0x3FF9'') 

    WHEN('GasType mixture is passed as input parameter to device')
      THEN('The stop_measure returns ok')
      THEN('The mock I2C's write buffer consists of stop measure mixture command byte '0x3FF9'') 

Scenario: SFM3019 Device:: SFM3019 device behaves correctly when set_averaging function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device global I2c device  and gas parameter')
    WHEN('GasType O2 and averaging_window 0 is passed as input parameter')
      THEN('The set_averaging returns ok')
      THEN('The mock I2C's write buffer consists of set_averaging command byte '0x366A' followed by '0x000081'') 

    WHEN('GasType O2 and averaging_window 128 is passed as input parameter')
      THEN('The set_averaging returns ok')
      THEN('The mock I2C's write buffer consists of set_averaging  command byte '0x366A' followed by '0x0080FB'') 

    WHEN('GasType air and averaging_window 0 is passed as input parameter')
      THEN('The set_averaging returns ok')
      THEN('The mock I2C's write buffer consists of set_averaging  command byte '0x366A' followed by '0x000081'') 

    WHEN('GasType air and averaging_window 128 is passed as input parameter')
      THEN('The set_averaging returns ok')
      THEN('The mock I2C's write buffer consists of set_averaging  command byte '0x366A' followed by '0x0080FB'') 

    WHEN('GasType mixture and averaging_window 0 is passed as input parameter')
      THEN('The set_averaging returns ok')
      THEN('The mock I2C's write buffer consists of set_averaging  command byte '0x366A' followed by '0x000081'') 

    WHEN('GasType mixture and averaging_window 128 is passed as input parameter')
      THEN('The set_averaging returns ok')
      THEN('The mock I2C's write buffer consists of set_averaging  command byte '0x366A' followed by '0x0080FB') 

Scenario: SFM3019 Device:: SFM3019 device behaves correctly when request_conversion_factors function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device , global I2C device and gas parameter')
    WHEN('GasType O2 is passed as input parameter')
      THEN('The request_conversion_factors returns ok')
      THEN('The mock I2C's write buffer consists of request_conversion_factor O2 command byte '0x3661 followed by '0x36033A'') 

    WHEN('GasType air is passed as input parameter')
      THEN('The request_conversion_factors returns ok')
      THEN('The mock I2C's write buffer consists of request_conversion_factor air command byte '0x3661 followed by '0x3608D0'') 

    WHEN('GasType mixture is passed as input parameter')
      THEN('The request_conversion_factors returns ok')
      THEN('The mock I2C's write buffer consists of request_conversion_factor mixture command byte '0x3661 followed by '0x3632CE'') 

Scenario: SFM3019 Device:: SFM3019 device behaves correctly when reset function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device, global I2C device and gas parameter')
    WHEN('GasType O2 is passed as input parameter')
      THEN('The reset function returns ok')

Scenario: SFM3019 Device:: SFM3019 device behaves correctly when read_product_id function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device, global I2C device and gas parameter')
    WHEN('Product id 0x04020611 is passed as an input parameter')
      THEN('The read_product_id returns ok status') 

Scenario: SFM3019 Device:: SFM3019 device behaves correctly when read_conversion_factors function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device, global I2C device and gas parameter')
    WHEN('scale_factor is 10 and offset is -5 is passed as input parameter')
      THEN('The read_conversion_factors function returns ok status') 


Scenario: SFM3019 Device:: SFM3019 device behaves correctly when read_sample function is called
  GIVEN('A SFM3019 device constructed with a mock I2C device, global I2C device and gas parameter')
    WHEN('Scale factor is 170 and offset is -24576 are passed as an input parameter')
      THEN('The read_sample function returns ok status') 
      THEN('Flow returns 325.57059f value')  
    WHEN('Scale factor is 10 and offset is 5 are passed as an input parameter')
      THEN('The read_sample function returns ok status') 
      THEN('Flow returns 3076.6001f value')  
