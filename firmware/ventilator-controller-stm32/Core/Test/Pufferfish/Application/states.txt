Scenario: The equality operator works correctly for simple POD structs from nanopb
  Given: Range, a struct type generated by nanopb
    When: the == operator is used to compare two instances whose fields are equal 
      Then: the operator returns true
    When: the == operator is used to compare two instances which differ only in the lower field 
      Then: the operator returns false
    When: the == operator is used to compare two instances which differ only in the upper field 
      Then: the operator returns false
    When: the == operator is used to compare two instances which differ in both fields
      Then: the operator returns false

Scenario: The equality operator works correctly for POD structs from nanopb with nested objects
  Given: AlarmLimits, a struct type generated by nanopb
    When: the == operator is used to compare two instances whose fields are equal, and whose ranges are uninitialized
      Then: the operator returns true
    When: the == operator is used to compare two instances whose fields are equal, and whose fio2 ranges are initialized
      Then: the operator returns true
    When: the == operator is used to compare two instances whose fields are equal, and whose fio2 and flow ranges are initialized
      Then: the operator returns true
    When: the == operator is used to compare two instances which differ only in the lower field of the fio2 ranges, and whose flow ranges are initialized and equal
      Then: the operator returns false
    When: the == operator is used to compare two instances which differ in only the upper field of the flow ranges, and whose fio2 ranges are initialized and equal 
      Then: the operator returns false
    // Note: the following is not intuitive behavior if we think about equality of protobufs rather than equality of C++ structs, but it's what you'd expect to happen if you literally compared each field in the struct. In order to achieve intuitive behavior, make sure to always set the "set_(fieldname)" flag to true when you modify the object at fieldname!
    When: the == operator is used to compare two instances which differ in only a field of ranges whose 'has_(range)' fields are unset 
      Then: the operator returns false

Scenario: The custom-defined equality operators work correctly for POD structs from nanopb with arrays in them
  Given: ActiveLogEvents, a struct type generated by nanopb which has a C-style array inside
    When: the == operator is used to compare two instances whose id arrays are equal, and whose num_id_count fields are equal
      Then: the operator returns true
    When: the == operator is used to compare two instances whose id arrays differ only in the zeroth element, and whose id_count fields are both 1
      Then: the operator returns false
    // Note: the following is intuitive behavior if we think about equality of protobufs rather than equality of C++ structs. This is because we can't rely on the Boost PFR library to provide the equality operator, so we must implement our own equality operator, where we do account for id_count
    When: the == operator is used to compare two instances whose id arrays differ in the first element, and whose id_count fields are both 1
      Then: the operator returns true
  Given: NextLogEvents, a struct type generated by nanopb which has a C-style array of LogEvent structs inside
    When: the == operator is used to compare two instances whose fields, including fields of elements in the array, are equal
      Then: the operator returns true
    When: the == operator is used to compare two instances which differ only in the next_expected field
      Then: the operator returns false
    When: the == operator is used to compare two instances which differ only in the total field
      Then: the operator returns false
    When: the == operator is used to compare two instances which differ only in the remaining field
      Then: the operator returns false
    When: the == operator is used to compare two instances which differ only in the session_id field
      Then: the operator returns false
    When: the == operator is used to compare two instances which differ only in the zeroth element of the elements array, and whose elements_count fields are both 1
      Then: the operator returns false
    // Note: the following is intuitive behavior if we think about equality of protobufs rather than equality of C++ structs. This is because we can't rely on the Boost PFR library to provide the equality operator, so we must implement our own equality operator, where we do account for elements_count
    When: the == operator is used to compare two instances which differ only in the first element of the elements array, and whose elements_count fields are both 1
      Then: the operator returns true